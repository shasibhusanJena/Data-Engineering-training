hbase(main):008:0> scan

ERROR: wrong number of arguments (0 for 1)

Scan a table; pass table name and optionally a dictionary of scanner
specifications.  Scanner specifications may include one or more of:
TIMERANGE, FILTER, LIMIT, STARTROW, STOPROW, ROWPREFIXFILTER, TIMESTAMP,
MAXLENGTH or COLUMNS, CACHE or RAW, VERSIONS, ALL_METRICS or METRICS

If no columns are specified, all columns will be scanned.
To scan all members of a column family, leave the qualifier empty as in
'col_family'.

The filter can be specified in two ways:
1. Using a filterString - more information on this is available in the
Filter Language document attached to the HBASE-4176 JIRA
2. Using the entire package name of the filter.

If you wish to see metrics regarding the execution of the scan, the
ALL_METRICS boolean should be set to true. Alternatively, if you would
prefer to see only a subset of the metrics, the METRICS array can be 
defined to include the names of only the metrics you care about.

Some examples:

  hbase> scan 'hbase:meta'
  hbase> scan 'hbase:meta', {COLUMNS => 'info:regioninfo'}
  hbase> scan 'ns1:t1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}
  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}
  hbase> scan 't1', {COLUMNS => 'c1', TIMERANGE => [1303668804, 1303668904]}
  hbase> scan 't1', {REVERSED => true}
  hbase> scan 't1', {ALL_METRICS => true}
  hbase> scan 't1', {METRICS => ['RPC_RETRIES', 'ROWS_FILTERED']}
  hbase> scan 't1', {ROWPREFIXFILTER => 'row2', FILTER => "
    (QualifierFilter (>=, 'binary:xyz')) AND (TimestampsFilter ( 123, 456))"}
  hbase> scan 't1', {FILTER =>
    org.apache.hadoop.hbase.filter.ColumnPaginationFilter.new(1, 0)}
  hbase> scan 't1', {CONSISTENCY => 'TIMELINE'}
For setting the Operation Attributes 
  hbase> scan 't1', { COLUMNS => ['c1', 'c2'], ATTRIBUTES => {'mykey' => 'myvalue'}}
  hbase> scan 't1', { COLUMNS => ['c1', 'c2'], AUTHORIZATIONS => ['PRIVATE','SECRET']}
For experts, there is an additional option -- CACHE_BLOCKS -- which
switches block caching for the scanner on (true) or off (false).  By
default it is enabled.  Examples:

  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], CACHE_BLOCKS => false}

Also for experts, there is an advanced option -- RAW -- which instructs the
scanner to return all cells (including delete markers and uncollected deleted
cells). This option cannot be combined with requesting specific COLUMNS.
Disabled by default.  Example:

  hbase> scan 't1', {RAW => true, VERSIONS => 10}

Besides the default 'toStringBinary' format, 'scan' supports custom formatting
by column.  A user can define a FORMATTER by adding it to the column name in
the scan specification.  The FORMATTER can be stipulated: 

 1. either as a org.apache.hadoop.hbase.util.Bytes method name (e.g, toInt, toString)
 2. or as a custom class followed by method name: e.g. 'c(MyFormatterClass).format'.

Example formatting cf:qualifier1 and cf:qualifier2 both as Integers: 
  hbase> scan 't1', {COLUMNS => ['cf:qualifier1:toInt',
    'cf:qualifier2:c(org.apache.hadoop.hbase.util.Bytes).toInt'] } 

Note that you can specify a FORMATTER by column only (cf:qualifier).  You cannot
specify a FORMATTER for all columns of a column family.

Scan can also be used directly from a table, by first getting a reference to a
table, like such:

  hbase> t = get_table 't'
  hbase> t.scan

Note in the above situation, you can still provide all the filtering, columns,
options, etc as described above.



hbase(main):009:0> list
TABLE                                                                                                  
students                                                                                               
1 row(s) in 0.0070 seconds

=> ["students"]
hbase(main):010:0> use students
NameError: undefined local variable or method `students' for #<Object:0x47f92044>

hbase(main):011:0> get 'students','students1'
COLUMN                     CELL                                                                        
 personal_details:email    timestamp=1652039065852, value=Sumit@gmail.com                              
 personal_details:name     timestamp=1652039063417, value=sumit                                        
2 row(s) in 0.0300 seconds

hbase(main):012:0> scan 'students'
ROW                        COLUMN+CELL                                                                 
 students1                 column=personal_details:email, timestamp=1652039065852, value=Sumit@gmail.co
                           m                                                                           
 students1                 column=personal_details:name, timestamp=1652039063417, value=sumit          
1 row(s) in 0.0850 seconds

hbase(main):013:0> get 'students','students1', {COLUMN => 'personal_details'}
COLUMN                     CELL                                                                        
 personal_details:email    timestamp=1652039065852, value=Sumit@gmail.com                              
 personal_details:name     timestamp=1652039063417, value=sumit                                        
2 row(s) in 0.0080 seconds

hbase(main):014:0> get 'students','students1', {COLUMN => 'personal_details:name'}
COLUMN                     CELL                                                                        
 personal_details:name     timestamp=1652039063417, value=sumit                                        
1 row(s) in 0.0250 seconds

hbase(main):015:0> delete 'students','students1','personal_details:email'
0 row(s) in 0.0690 seconds

hbase(main):016:0> scan 'students'
ROW                        COLUMN+CELL                                                                 
 students1                 column=personal_details:name, timestamp=1652039063417, value=sumit          
1 row(s) in 0.0230 seconds

hbase(main):017:0> describe 'students'
Table students is ENABLED                                                                              
students                                                                                               
COLUMN FAMILIES DESCRIPTION                                                                            
{NAME => 'contact_details', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '
0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS =
> 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                           
{NAME => 'marks', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIO
NS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE',
 BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                                     
{NAME => 'personal_details', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => 
'0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS 
=> 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                          
3 row(s) in 0.0730 seconds

hbase(main):018:0> 
hbase(main):019:0* describe 'students'
Table students is ENABLED                                                                              
students                                                                                               
COLUMN FAMILIES DESCRIPTION                                                                            
{NAME => 'contact_details', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '
0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS =
> 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                           
{NAME => 'marks', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIO
NS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE',
 BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                                     
{NAME => 'personal_details', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => 
'0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS 
=> 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                          
3 row(s) in 0.0340 seconds

hbase(main):020:0> exists 'students'
Table students does exist                                                                              
0 row(s) in 0.0180 seconds

hbase(main):021:0> drop 'students'

ERROR: Table students is enabled. Disable it first.

Drop the named table. Table must first be disabled:
  hbase> drop 't1'
  hbase> drop 'ns1:t1'


hbase(main):022:0> disable 'students'
0 row(s) in 2.3480 seconds

hbase(main):023:0> drop 'students'
0 row(s) in 1.3170 seconds

hbase(main):024:0> 
hbase(main):025:0* list
TABLE                                                                                        

ERROR: Can't get master address from ZooKeeper; znode data == null

List all tables in hbase. Optional regular expression parameter could
be used to filter the output. Examples:

  hbase> list
  hbase> list 'abc.*'
  hbase> list 'ns:abc.*'
  hbase> list 'ns:.*'


hbase(main):026:0> list
TABLE                                                                                        
0 row(s) in 0.0190 seconds

=> []
hbase(main):027:0> list
TABLE                                                                                                                                                                                         
0 row(s) in 0.0120 seconds

=> []
hbase(main):028:0> scan

ERROR: wrong number of arguments (0 for 1)

Scan a table; pass table name and optionally a dictionary of scanner
specifications.  Scanner specifications may include one or more of:
TIMERANGE, FILTER, LIMIT, STARTROW, STOPROW, ROWPREFIXFILTER, TIMESTAMP,
MAXLENGTH or COLUMNS, CACHE or RAW, VERSIONS, ALL_METRICS or METRICS

If no columns are specified, all columns will be scanned.
To scan all members of a column family, leave the qualifier empty as in
'col_family'.

The filter can be specified in two ways:
1. Using a filterString - more information on this is available in the
Filter Language document attached to the HBASE-4176 JIRA
2. Using the entire package name of the filter.

If you wish to see metrics regarding the execution of the scan, the
ALL_METRICS boolean should be set to true. Alternatively, if you would
prefer to see only a subset of the metrics, the METRICS array can be 
defined to include the names of only the metrics you care about.

Some examples:

  hbase> scan 'hbase:meta'
  hbase> scan 'hbase:meta', {COLUMNS => 'info:regioninfo'}
  hbase> scan 'ns1:t1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}
  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}
  hbase> scan 't1', {COLUMNS => 'c1', TIMERANGE => [1303668804, 1303668904]}
  hbase> scan 't1', {REVERSED => true}
  hbase> scan 't1', {ALL_METRICS => true}
  hbase> scan 't1', {METRICS => ['RPC_RETRIES', 'ROWS_FILTERED']}
  hbase> scan 't1', {ROWPREFIXFILTER => 'row2', FILTER => "
    (QualifierFilter (>=, 'binary:xyz')) AND (TimestampsFilter ( 123, 456))"}
  hbase> scan 't1', {FILTER =>
    org.apache.hadoop.hbase.filter.ColumnPaginationFilter.new(1, 0)}
  hbase> scan 't1', {CONSISTENCY => 'TIMELINE'}
For setting the Operation Attributes 
  hbase> scan 't1', { COLUMNS => ['c1', 'c2'], ATTRIBUTES => {'mykey' => 'myvalue'}}
  hbase> scan 't1', { COLUMNS => ['c1', 'c2'], AUTHORIZATIONS => ['PRIVATE','SECRET']}
For experts, there is an additional option -- CACHE_BLOCKS -- which
switches block caching for the scanner on (true) or off (false).  By
default it is enabled.  Examples:

  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], CACHE_BLOCKS => false}

Also for experts, there is an advanced option -- RAW -- which instructs the
scanner to return all cells (including delete markers and uncollected deleted
cells). This option cannot be combined with requesting specific COLUMNS.
Disabled by default.  Example:

  hbase> scan 't1', {RAW => true, VERSIONS => 10}

Besides the default 'toStringBinary' format, 'scan' supports custom formatting
by column.  A user can define a FORMATTER by adding it to the column name in
the scan specification.  The FORMATTER can be stipulated: 

 1. either as a org.apache.hadoop.hbase.util.Bytes method name (e.g, toInt, toString)
 2. or as a custom class followed by method name: e.g. 'c(MyFormatterClass).format'.

Example formatting cf:qualifier1 and cf:qualifier2 both as Integers: 
  hbase> scan 't1', {COLUMNS => ['cf:qualifier1:toInt',
    'cf:qualifier2:c(org.apache.hadoop.hbase.util.Bytes).toInt'] } 

Note that you can specify a FORMATTER by column only (cf:qualifier).  You cannot
specify a FORMATTER for all columns of a column family.

Scan can also be used directly from a table, by first getting a reference to a
table, like such:

  hbase> t = get_table 't'
  hbase> t.scan

Note in the above situation, you can still provide all the filtering, columns,
options, etc as described above.



hbase(main):029:0> create 'census','personal','professional'
0 row(s) in 1.3130 seconds

=> Hbase::Table - census
hbase(main):030:0> list
TABLE                                                                                                                                                                                         
census                                                                                                                                                                                        
1 row(s) in 0.0080 seconds

=> ["census"]
hbase(main):031:0> describe census
NameError: undefined local variable or method `census' for #<Object:0x47f92044>

hbase(main):032:0> describe 'census'
Table census is ENABLED                                                                                                                                                                       
census                                                                                                                                                                                        
COLUMN FAMILIES DESCRIPTION                                                                                                                                                                   
{NAME => 'personal', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETE
D_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                                                                                                         
{NAME => 'professional', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DE
LETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                                                                                                     
2 row(s) in 0.0270 seconds

hbase(main):033:0> 
hbase(main):034:0* put 'census',1,'personal:name','Mike Johns'
0 row(s) in 0.0380 seconds

hbase(main):035:0> put 'census',1,'personal:marital_status','unmarried'
0 row(s) in 0.0030 seconds

hbase(main):036:0> put 'census',1,'personal:gender','male'
0 row(s) in 0.0030 seconds

hbase(main):037:0> put 'census',1,'personal:employed','yes'
0 row(s) in 0.0070 seconds

hbase(main):038:0> put 'census',1,'personal:education_level','high school'
0 row(s) in 0.0040 seconds

hbase(main):039:0> put 'census',1,'personal:field','construction'
0 row(s) in 0.0060 seconds

hbase(main):040:0> get 'census'

ERROR: wrong number of arguments (1 for 2)

Get row or cell contents; pass table name, row, and optionally
a dictionary of column(s), timestamp, timerange and versions. Examples:

  hbase> get 'ns1:t1', 'r1'
  hbase> get 't1', 'r1'
  hbase> get 't1', 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> get 't1', 'r1', {COLUMN => 'c1'}
  hbase> get 't1', 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> get 't1', 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> get 't1', 'r1', 'c1'
  hbase> get 't1', 'r1', 'c1', 'c2'
  hbase> get 't1', 'r1', ['c1', 'c2']
  hbase> get 't1', 'r1', {COLUMN => 'c1', ATTRIBUTES => {'mykey'=>'myvalue'}}
  hbase> get 't1', 'r1', {COLUMN => 'c1', AUTHORIZATIONS => ['PRIVATE','SECRET']}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}

Besides the default 'toStringBinary' format, 'get' also supports custom formatting by
column.  A user can define a FORMATTER by adding it to the column name in the get
specification.  The FORMATTER can be stipulated: 

 1. either as a org.apache.hadoop.hbase.util.Bytes method name (e.g, toInt, toString)
 2. or as a custom class followed by method name: e.g. 'c(MyFormatterClass).format'.

Example formatting cf:qualifier1 and cf:qualifier2 both as Integers: 
  hbase> get 't1', 'r1' {COLUMN => ['cf:qualifier1:toInt',
    'cf:qualifier2:c(org.apache.hadoop.hbase.util.Bytes).toInt'] } 

Note that you can specify a FORMATTER by column only (cf:qualifier).  You cannot specify
a FORMATTER for all columns of a column family.
    
The same commands also can be run on a reference to a table (obtained via get_table or
create_table). Suppose you had a reference t to table 't1', the corresponding commands
would be:

  hbase> t.get 'r1'
  hbase> t.get 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> t.get 'r1', {COLUMN => 'c1'}
  hbase> t.get 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> t.get 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> t.get 'r1', 'c1'
  hbase> t.get 'r1', 'c1', 'c2'
  hbase> t.get 'r1', ['c1', 'c2']
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}


hbase(main):041:0> put 'census',3,'personal:name','Jill Tang'
0 row(s) in 0.0060 seconds

hbase(main):042:0> put 'census',3,'personal:marital_status','married'
0 row(s) in 0.0040 seconds

hbase(main):043:0> put 'census',3,'personal:gender','female'
0 row(s) in 0.0080 seconds

hbase(main):044:0> put 'census',3,'personal:spouse','Jim Tang'
0 row(s) in 0.0040 seconds

hbase(main):045:0> put 'census',3,'personal:education_level','post Graguate'
0 row(s) in 0.0040 seconds

hbase(main):046:0> put 'census',3,'personal:field','construction'
0 row(s) in 0.0100 seconds

hbase(main):047:0> scan

ERROR: wrong number of arguments (0 for 1)

Scan a table; pass table name and optionally a dictionary of scanner
specifications.  Scanner specifications may include one or more of:
TIMERANGE, FILTER, LIMIT, STARTROW, STOPROW, ROWPREFIXFILTER, TIMESTAMP,
MAXLENGTH or COLUMNS, CACHE or RAW, VERSIONS, ALL_METRICS or METRICS

If no columns are specified, all columns will be scanned.
To scan all members of a column family, leave the qualifier empty as in
'col_family'.

The filter can be specified in two ways:
1. Using a filterString - more information on this is available in the
Filter Language document attached to the HBASE-4176 JIRA
2. Using the entire package name of the filter.

If you wish to see metrics regarding the execution of the scan, the
ALL_METRICS boolean should be set to true. Alternatively, if you would
prefer to see only a subset of the metrics, the METRICS array can be 
defined to include the names of only the metrics you care about.

Some examples:

  hbase> scan 'hbase:meta'
  hbase> scan 'hbase:meta', {COLUMNS => 'info:regioninfo'}
  hbase> scan 'ns1:t1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}
  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}
  hbase> scan 't1', {COLUMNS => 'c1', TIMERANGE => [1303668804, 1303668904]}
  hbase> scan 't1', {REVERSED => true}
  hbase> scan 't1', {ALL_METRICS => true}
  hbase> scan 't1', {METRICS => ['RPC_RETRIES', 'ROWS_FILTERED']}
  hbase> scan 't1', {ROWPREFIXFILTER => 'row2', FILTER => "
    (QualifierFilter (>=, 'binary:xyz')) AND (TimestampsFilter ( 123, 456))"}
  hbase> scan 't1', {FILTER =>
    org.apache.hadoop.hbase.filter.ColumnPaginationFilter.new(1, 0)}
  hbase> scan 't1', {CONSISTENCY => 'TIMELINE'}
For setting the Operation Attributes 
  hbase> scan 't1', { COLUMNS => ['c1', 'c2'], ATTRIBUTES => {'mykey' => 'myvalue'}}
  hbase> scan 't1', { COLUMNS => ['c1', 'c2'], AUTHORIZATIONS => ['PRIVATE','SECRET']}
For experts, there is an additional option -- CACHE_BLOCKS -- which
switches block caching for the scanner on (true) or off (false).  By
default it is enabled.  Examples:

  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], CACHE_BLOCKS => false}

Also for experts, there is an advanced option -- RAW -- which instructs the
scanner to return all cells (including delete markers and uncollected deleted
cells). This option cannot be combined with requesting specific COLUMNS.
Disabled by default.  Example:

  hbase> scan 't1', {RAW => true, VERSIONS => 10}

Besides the default 'toStringBinary' format, 'scan' supports custom formatting
by column.  A user can define a FORMATTER by adding it to the column name in
the scan specification.  The FORMATTER can be stipulated: 

 1. either as a org.apache.hadoop.hbase.util.Bytes method name (e.g, toInt, toString)
 2. or as a custom class followed by method name: e.g. 'c(MyFormatterClass).format'.

Example formatting cf:qualifier1 and cf:qualifier2 both as Integers: 
  hbase> scan 't1', {COLUMNS => ['cf:qualifier1:toInt',
    'cf:qualifier2:c(org.apache.hadoop.hbase.util.Bytes).toInt'] } 

Note that you can specify a FORMATTER by column only (cf:qualifier).  You cannot
specify a FORMATTER for all columns of a column family.

Scan can also be used directly from a table, by first getting a reference to a
table, like such:

  hbase> t = get_table 't'
  hbase> t.scan

Note in the above situation, you can still provide all the filtering, columns,
options, etc as described above.



hbase(main):048:0> list
TABLE                                                                                                                                                                                         
census                                                                                                                                                                                        
1 row(s) in 0.0130 seconds

=> ["census"]
hbase(main):049:0> describe census
NameError: undefined local variable or method `census' for #<Object:0x47f92044>

hbase(main):050:0> describe 'census'
Table census is ENABLED                                                                                                                                                                       
census                                                                                                                                                                                        
COLUMN FAMILIES DESCRIPTION                                                                                                                                                                   
{NAME => 'personal', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETE
D_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                                                                                                         
{NAME => 'professional', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DE
LETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'false', BLOCKCACHE => 'true'}                                                                                                     
2 row(s) in 0.0470 seconds

hbase(main):051:0> scan 'census'
ROW                                              COLUMN+CELL                                                                                                                                  
 1                                               column=personal:education_level, timestamp=1652167698870, value=high school                                                                  
 1                                               column=personal:employed, timestamp=1652167698853, value=yes                                                                                 
 1                                               column=personal:field, timestamp=1652167701752, value=construction                                                                           
 1                                               column=personal:gender, timestamp=1652167698839, value=male                                                                                  
 1                                               column=personal:marital_status, timestamp=1652167698825, value=unmarried                                                                     
 1                                               column=personal:name, timestamp=1652167698800, value=Mike Johns                                                                              
 3                                               column=personal:education_level, timestamp=1652167752396, value=post Graguate                                                                
 3                                               column=personal:field, timestamp=1652167753875, value=construction                                                                           
 3                                               column=personal:gender, timestamp=1652167752358, value=female                                                                                
 3                                               column=personal:marital_status, timestamp=1652167752342, value=married                                                                       
 3                                               column=personal:name, timestamp=1652167752322, value=Jill Tang                                                                               
 3                                               column=personal:spouse, timestamp=1652167752377, value=Jim Tang                                                                              
2 row(s) in 0.0260 seconds
=========================================================
hbase(main):052:0> 
hbase(main):053:0* get 'census',1
COLUMN                                           CELL                                                                                                                                         
 personal:education_level                        timestamp=1652167698870, value=high school                                                                                                   
 personal:employed                               timestamp=1652167698853, value=yes                                                                                                           
 personal:field                                  timestamp=1652167701752, value=construction                                                                                                  
 personal:gender                                 timestamp=1652167698839, value=male                                                                                                          
 personal:marital_status                         timestamp=1652167698825, value=unmarried                                                                                                     
 personal:name                                   timestamp=1652167698800, value=Mike Johns                                                                                                    
6 row(s) in 0.0150 seconds

hbase(main):054:0> get 'census',1
COLUMN                                           CELL                                                                                                                                         
 personal:education_level                        timestamp=1652167698870, value=high school                                                                                                   
 personal:employed                               timestamp=1652167698853, value=yes                                                                                                           
 personal:field                                  timestamp=1652167701752, value=construction                                                                                                  
 personal:gender                                 timestamp=1652167698839, value=male                                                                                                          
 personal:marital_status                         timestamp=1652167698825, value=unmarried                                                                                                     
 personal:name                                   timestamp=1652167698800, value=Mike Johns                                                                                                    
6 row(s) in 0.0110 seconds

hbase(main):055:0> get 'census',1,'personal:name'
COLUMN                                           CELL                                                                                                                                         
 personal:name                                   timestamp=1652167698800, value=Mike Johns                                                                                                    
1 row(s) in 0.0070 seconds
================================================
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default
drwxr-xr-x   - hbase supergroup          0 2022-03-07 08:32 /hbase/data/hbase
[cloudera@quickstart ~]$ hadoop fs -ls /hbase/data/defalut
ls: `/hbase/data/defalut': No such file or directory
[cloudera@quickstart ~]$ hadoop fs -ls /hbase/data/default
Found 1 items
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census
[cloudera@quickstart ~]$ hadoop fs -ls-R /hbase/data/default
-ls-R: Unknown command
[cloudera@quickstart ~]$ hadoop fs -ls -r /hbase/data/default
Found 1 items
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default
Found 1 items
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census
Found 3 items
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/.tabledesc
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/.tmp
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census/875402473670ed740063304bec14a7c0
Found 4 items
-rw-r--r--   1 hbase supergroup         41 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/.regioninfo
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/personal
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/professional
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/recovered.edits

=====================================================
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default
Found 1 items
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census
Found 3 items
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/.tabledesc
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/.tmp
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census/875402473670ed740063304bec14a7c0
Found 4 items
-rw-r--r--   1 hbase supergroup         41 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/.regioninfo
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/personal
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/professional
drwxr-xr-x   - hbase supergroup          0 2022-05-10 00:27 /hbase/data/default/census/875402473670ed740063304bec14a7c0/recovered.edits
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census/personal
ls: `/hbase/data/default/census/personal': No such file or directory
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census/875402473670ed740063304bec14a7c0/professional
[cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census/875402473670ed740063304bec14a7c0/personal
[cloudera@quickstart ~]$ 
# since there is no Hfile inside it so it is not showing anyting here.
==============================
once we disable the census we can see a file got created.
cloudera@quickstart ~]$ hadoop fs -ls  /hbase/data/default/census/875402473670ed740063304bec14a7c0/personal
Found 1 items
-rw-r--r--   1 hbase supergroup       1572 2022-05-10 00:45 /hbase/data/default/census/875402473670ed740063304bec14a7c0/personal/7d27fcf7bfb34c209e697fecca4cc292

========================
Three types of filter are there:-

value filter
QualifierFilter
Family filter

scan 'census',{FILTER => "FamilyFilter(=,'substring:personal')"}

=========================
hbase(main):060:0> enable 'census'
0 row(s) in 1.3010 seconds

hbase(main):061:0> scan 'census',{FILTER => "FamilyFilter(=,'substring:personal')"}
ROW                                              COLUMN+CELL                                                                                                                                  
 1                                               column=personal:education_level, timestamp=1652167698870, value=high school                                                                  
 1                                               column=personal:employed, timestamp=1652167698853, value=yes                                                                                 
 1                                               column=personal:field, timestamp=1652167701752, value=construction                                                                           
 1                                               column=personal:gender, timestamp=1652167698839, value=male                                                                                  
 1                                               column=personal:marital_status, timestamp=1652167698825, value=unmarried                                                                     
 1                                               column=personal:name, timestamp=1652167698800, value=Mike Johns                                                                              
 3                                               column=personal:education_level, timestamp=1652167752396, value=post Graguate                                                                
 3                                               column=personal:field, timestamp=1652167753875, value=construction                                                                           
 3                                               column=personal:gender, timestamp=1652167752358, value=female                                                                                
 3                                               column=personal:marital_status, timestamp=1652167752342, value=married                                                                       
 3                                               column=personal:name, timestamp=1652167752322, value=Jill Tang                                                                               
 3                                               column=personal:spouse, timestamp=1652167752377, value=Jim Tang                                                                              
2 row(s) in 0.0300 seconds

hbase(main):062:0> 
